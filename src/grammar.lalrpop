use crate::scanner::Tok;
use crate::ast::*;

grammar<'input>(input: &'input str);

// MACROS

// A macro for lists
Vec<T>: Vec<T> = <mut items:(<T> ",")*> <end:T?> ";"? => match end {
    Some(end) => {
        items.push(end);
        items
    },
    _ => items,
};

// A macro which automagically boxes a pattern
Box<T>: Box<T> = <item:T> => Box::new(item);

// LITERALS/CONSTANTS

// A boolean constant.
pub Bool: Bool = {
    <start:@L> "true" <end:@R> => Bool {
        span: start..end,
        value: true,
    },
    <start:@L> "false" <end:@R> => Bool {
        span: start..end,
        value: false,
    },
};

// An identifier literal.
pub Id: Id<'input> = <start:@L> <value:id> <end:@R> => Id {
    span: start..end,
    value,
};

// A number literal.
pub Num: Num<'input> = {
    <start:@L> <value:int> <end:@R> => Num {
        span: start..end,
        kind: NumKind::Int,
        value,
    },
    <start:@L> <value:xint> <end:@R> => Num {
        span: start..end,
        kind: NumKind::XInt,
        value,
    },
    <start:@L> <value:bint> <end:@R> => Num {
        span: start..end,
        kind: NumKind::BInt,
        value,
    },
    <start:@L> <value:float> <end:@R> => Num {
        span: start..end,
        kind: NumKind::Float,
        value,
    },
};

// A string literal.
pub Str: Str<'input> = {
    <start:@L> <value:str> <end:@R> => Str {
        span: start..end,
        value,
    }
};

// A path expression.
pub GlobalPath: GlobalPath<'input> = {
    <id:Id> => GlobalPath::Id(id),
    <start:@L> <path:Box<GlobalPath>> "::" <id:Id> <end:@R> => GlobalPath::Branch {
        span: start..end,
        path,
        id,
    }
};

// DECLARATIONS

pub Marker: Marker<'input> = <start:@L> "#" <name:Id> <end:@R> => Marker {
    span: start..end,
    name,
};

// Routine declarations
pub RoutineArg: RoutineArg<'input> = <start:@L> <name:Id> "<-" <ty:Type> <end:@R> => RoutineArg {
    span: start..end,
    name,
    ty,
};

pub Routine: Routine<'input> = 
    <start:@L> "routine" "(" <args:Vec<RoutineArg>> ")" <returns:("->" <Type>)?> <markers:Marker*> <block:Block> <end:@R> => Routine {
        span: start..end,
        args,
        returns,
        markers,
        block,
    };

// TYPES

pub PathType: Type<'input> = {
    <id:Id> => Type::Id(id),
    <start:@L> <left:Box<PathType>> "::" <right:Id> <end:@R> => Type::Path(PathType {
        span: start..end,
        left,
        right,
    }),
};

pub StructProp: StructProp<'input> = <start:@L> <name:Id> "<-" <ty:Type> <end:@R> => StructProp {
    span: start..end,
    name,
    ty,
};

pub EnumProp: EnumProp<'input> = <start:@L> <name:Id> <ty:("<-" <Type>)?> <end:@R> => EnumProp {
    span: start..end,
    name,
    ty,
};

pub PrimType: Type<'input> = {
    <path:PathType> => path,
    <start:@L> "routine" "(" <args:Vec<Type>> ")" <returns:("->" <Box<Type>>)?> <end:@R> => Type::Routine(RoutineType {
        span: start..end,
        args,
        returns,
    }),
    <start:@L> "struct" "{" <props:Vec<StructProp>> "}" <end:@R> => Type::Struct(StructType {
        span: start..end,
        props,
    }),
    <start:@L> "enum" "{" <props:Vec<EnumProp>> "}" <end:@R> => Type::Enum(EnumType {
        span: start..end,
        props,
    }),
    <start:@L> "contract" "{" <mut items:(<Application> ";")*> <last:Application?> "}" <end:@R> => {
        let items = match last {
            Some(last) => {
                items.push(last);
                items
            },
            _ => items,
        };
    
        Type::Contract(ContractType {
            span: start..end,
            items,
        })
    }
};

pub UnaryType: Type<'input> = {
    <prim:PrimType> => prim,
    <start:@L> "shared" <subject:Box<UnaryType>> <end:@R> => Type::Shared(SharedType {
        span: start..end,
        subject,
    }),
    <start:@L> "fluid" <subject:Box<UnaryType>> <end:@R> => Type::Fluid(FluidType {
        span: start..end,
        subject,
    }),
    <start:@L> "&" <subject:Box<UnaryType>> <end:@R> => Type::Ref(RefType {
        span: start..end,
        subject,
    }),
    <start:@L> "?" <subject:Box<UnaryType>> <end:@R> => Type::Opt(OptType {
        span: start..end,
        subject,
    }),
    <start:@L> "!" <ok:Box<UnaryType>> ":" <err:Box<UnaryType>> <end:@R> => Type::Res(ResType {
        span: start..end,
        ok,
        err,
    })
};

pub Type: Type<'input> = UnaryType;
 
// EXPRESSIONS

// A primary expression, such as a literal or constant.
pub PrimExpr: Expr<'input> = {
    <bool:Bool> => Expr::Bool(bool),
    <id:Id> => Expr::Id(id),
    <num:Num> => Expr::Num(num),
    <str:Str> => Expr::Str(str),
    "(" <expr:Expr> ")" => expr,
    <routine:Routine> => Expr::Routine(routine),
};

pub Call: Call<'input> = <start:@L> <left:Box<PathExpr>> "(" <args:Vec<Expr>> ")" <end:@R> => Call {
    span: start..end,
    left,
    args,
};

// A field in a struct constructor.
pub ConstructProp: ConstructProp<'input> = <start:@L> <name:Id> "=" <value:Expr> <end:@R> => ConstructProp {
    span: start..end,
    name,
    value,
};

// A path expression, such as `unit::MyStruct`.
pub PathExpr: Expr<'input> = {
    <prim:PrimExpr> => prim,
    <start:@L> <left:Box<PathExpr>> "::" <id:Id> <end:@R> => Expr::Path(Path {
        span: start..end,
        left,
        right: id,
    }),
    <start:@L> <left:Box<PathExpr>> "." <id:Id> <end:@R> => Expr::Access(Access {
        span: start..end,
        left,
        right: id,
    }),
    <start:@L> <subject:Box<PathExpr>> "::" "{" <items:Vec<ConstructProp>> "}" <end:@R> => Expr::Construct(Construct {
        span: start..end,
        subject,
        items,
    }),
    <start:@L> <subject:Box<PathExpr>> "::" "(" <item:Box<Expr>> ")" <end:@R> => Expr::ConstructEnum(ConstructEnum {
        span: start..end,
        subject,
        item,
    }),
    <call:Call> => Expr::Call(call),
};

// A unary expression, such as `&fluid variable`.
pub UnaryOp: UnaryOp = {
    "-" => UnaryOp::Min,
    "*" => UnaryOp::Star,
    "!" => UnaryOp::Bang,
    "&" => UnaryOp::Borrow,
    "fluid" => UnaryOp::Fluid,
    "shared" => UnaryOp::Shared,
};

pub UnaryExpr: Expr<'input> = {
    <path:PathExpr> => path,
    <start:@L> <op:UnaryOp> <subject:Box<UnaryExpr>> <end:@R> => Expr::Unary(Unary {
        span: start..end,
        op,
        subject,
    }),
};

pub AsExpr: Expr<'input> = {
    <unary:UnaryExpr> => unary,
    <start:@L> <subject:Box<AsExpr>> "as" <ty:Type> <end:@R> => Expr::As(As {
        span: start..end,
        subject,
        ty,
    })
};

pub MulOp: BinaryOp = {
    "*" => BinaryOp::Star,
    "/" => BinaryOp::Slash,
    "%" => BinaryOp::Perc,
};

pub MulExpr: Expr<'input> = {
    <as_:AsExpr> => as_,
    <start:@L> <left:Box<MulExpr>> <op:MulOp> <right:Box<AsExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op,
        left,
        right,
    }),
};

pub AddOp: BinaryOp = {
    "+" => BinaryOp::Plus,
    "-" => BinaryOp::Min,
};

pub AddExpr: Expr<'input> = {
    <mul:MulExpr> => mul,
    <start:@L> <left:Box<AddExpr>> <op:AddOp> <right:Box<MulExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op,
        left,
        right,
    }),
};

pub ShiftOp: BinaryOp = {
    "<<" => BinaryOp::LtLt,
    ">>" => BinaryOp::GtGt,
};

pub ShiftExpr: Expr<'input> = {
    <add:AddExpr> => add,
    <start:@L> <left:Box<ShiftExpr>> <op:ShiftOp> <right:Box<AddExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op,
        left,
        right,
    }),
};

pub BitAndExpr: Expr<'input> = {
    <shift:ShiftExpr> => shift,
    <start:@L> <left:Box<BitAndExpr>> "&" <right:Box<ShiftExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op: BinaryOp::Amp,
        left,
        right,
    }),
};

pub BitXorExpr: Expr<'input> = {
    <and:BitAndExpr> => and,
    <start:@L> <left:Box<BitXorExpr>> "^" <right:Box<BitAndExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op: BinaryOp::Caret,
        left,
        right,
    })
};

pub BitOrExpr: Expr<'input> = {
    <xor:BitXorExpr> => xor,
    <start:@L> <left:Box<BitOrExpr>> "|" <right:Box<BitXorExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op: BinaryOp::Pipe,
        left,
        right,
    }),
};

pub CompOp: BinaryOp = {
    "==" => BinaryOp::EqEq,
    "!=" => BinaryOp::BangEq,
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::LtEq,
    ">=" => BinaryOp::GtEq,
};

pub CompExpr: Expr<'input> = {
    <or:BitOrExpr> => or,
    <start:@L> <left:Box<CompExpr>> <op:CompOp> <right:Box<BitOrExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op,
        left,
        right,
    })
};

pub LogAndExpr: Expr<'input> = {
    <comp:CompExpr> => comp,
    <start:@L> <left:Box<LogAndExpr>> "&&" <right:Box<CompExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op: BinaryOp::AmpAmp,
        left,
        right,
    }),
};

pub LogOrExpr: Expr<'input> = {
    <and:LogAndExpr> => and,
    <start:@L> <left:Box<LogOrExpr>> "||" <right:Box<LogAndExpr>> <end:@R> => Expr::Binary(Binary {
        span: start..end,
        op: BinaryOp::PipePipe,
        left,
        right,
    }),
};

// Assign expressions are special, as they cannot be used as values.
pub AssignOp: AssignOp = {
    "=" => AssignOp::Eq,
    "+=" => AssignOp::PlusEq,
    "-=" => AssignOp::MinEq,
    "*=" => AssignOp::StarEq,
    "/=" => AssignOp::SlashEq,
    "%=" => AssignOp::PercEq,
    "&=" => AssignOp::AmpEq,
    "|=" => AssignOp::PipeEq,
    "^=" => AssignOp::CaretEq,
    "<<=" => AssignOp::LtLtEq,
    ">>=" => AssignOp::GtGtEq,
};

// TODO: make binary expressions have span data (Binary<'a>)
// Matches any valid hail expression.
pub Expr: Expr<'input> = { 
    <LogOrExpr>,
};

pub Assign: Assign<'input> = <start:@L> <left:PrimExpr> <op:AssignOp> <right:Expr> <end:@R> => Assign {
    span: start..end,
    op,
    left,
    right,
};

// Val statements/variable declarations.
pub Val: Val<'input> = <start:@L> "val" <name:Id> <ty:("<-" <Type>)?> <value:("=" <Expr>)?> <end:@R> => Val {
    span: start..end,
    name,
    ty,
    value,
};

// Type declarations
pub TypeDecl: TypeDecl<'input> = <start:@L> "type" <name:Id> <value:("=" <Type>)?> <end:@R> => TypeDecl {
    span: start..end,
    name,
    value,
};

// If statements
pub IfBranch: IfBranch<'input> = {
    <start:@L> "else" "if" <cond:Expr> <block:Block> <end:@R> => IfBranch::ElseIf {
        span: start..end,
        cond,
        block,
    },
    <start:@L> "else" <block:Block> <end:@R> => IfBranch::Else {
        span: start..end,
        block,
    },
};

pub If: If<'input> = <start:@L> "if" <cond:Expr> <block:Block> <branches:IfBranch*> <end:@R> => If {
    span: start..end,
    cond,
    block,
    branches,
};

// While statements
pub While: While<'input> = <start:@L> <label:(<Id> ":")?> "while" <cond:Expr> <block:Block> <end:@R> => While {
    span: start..end,
    label,
    cond,
    block,
};

// Match statements
pub MatchCase: MatchCase<'input> = <start:@L> <name:Id> "<-" <ty:Type> "=>" <block:Block> <end:@R> => MatchCase {
    span: start..end,
    name,
    ty,
    block,
};

pub Match: Match<'input> = <start:@L> "match" <subject:Expr> "{" <cases:Vec<MatchCase>> "}" <end:@R> => Match {
    span: start..end,
    subject,
    cases,
};

pub Break: Break<'input> = <start:@L> "break" <label:Id?> <end:@R> => Break {
    span: start..end,
    label,
};

pub Continue: Continue<'input> = <start:@L> "continue" <label:Id?> <end:@R> => Continue {
    span: start..end,
    label,
};

pub Return: Return<'input> = <start:@L> "return" <value:Expr?> <end:@R> => Return {
    span: start..end,
    value,
};

// A compile time flag.
pub Flag: Flag<'input> = <start:@L> "@" <neg:"!"?> <name:Id> ";"? <end:@R> => Flag {
    span: start..end,
    neg: match neg { Some(_) => true, _ => false },
    name,
};

// Code blocks
pub BlockExpr: BlockExpr<'input> = {
    <assign:Assign> => BlockExpr::Assign(assign),
    <val:Val> => BlockExpr::Val(val),
    <call:Call> => BlockExpr::Call(call),
    <if_:If> => BlockExpr::If(if_),
    <while_:While> => BlockExpr::While(while_),
    <match_:Match> => BlockExpr::Match(match_),
    <ty:TypeDecl> => BlockExpr::TypeDecl(ty),
    <br:Break> => BlockExpr::Break(br),
    <cont:Continue> => BlockExpr::Continue(cont),
    <ret:Return> => BlockExpr::Return(ret),
    <flags:Flag*> <block:Box<Block>> => BlockExpr::Block(flags, block),
};

pub Block: Block<'input> = <start:@L> "{" <mut items:(<BlockExpr> ";")*> <last:BlockExpr?> "}" <end:@R> => match last {
    Some(last) => {
        items.push(last);
        Block {
            span: start..end,
            items,
        }
    },
    None => Block {
        span: start..end,
        items,
    },
};

/// An item being imported.
pub ImportItem: ImportItem<'input> = <start:@L> <name:Id> <as_:("as" <Id>)?> <end:@R> => ImportItem {
    span: start..end,
    name,
    as_,
};

// An import statement
pub Import: Import<'input> = {
    <start:@L> <shared:"shared"?> "import" <item:ImportItem> <from:("from" <Id>)?> <end:@R> => Import::Single {
        span: start..end,
        shared: match shared { Some(_) => true, _ => false },
        item,
        from,
    },
    <start:@L> <shared:"shared"?> "import" "{" <items:Vec<ImportItem>> "}" <from:("from" <Id>)> <end:@R> => Import::Multi {
        span: start..end,
        shared: match shared { Some(_) => true, _ => false },
        items,
        from,
    },
};

/// An apply statement.
pub Application: Application<'input> = {
    <val:Val> => Application::Val(val),
    <ty:TypeDecl> => Application::TypeDecl(ty),
};

pub Apply: Apply<'input> =
    <start:@L> "apply" <subject:GlobalPath> <to:("to" <GlobalPath>)?> "{" <mut items:(<Application> ";")*> <last:Application?> "}" <end:@R> => {
    let items = match last {
        Some(last) => {
            items.push(last);
            items
        },
        _ => items,
    };

    Apply {
        span: start..end,
        subject,
        to,
        items,
    }
};

// Statements that can be found in the root of a unit.
pub RootStmnt: RootStmnt<'input> = {
    <assign:Assign> => RootStmnt::Assign(assign),
    <flags:Flag*> <val:Val> => RootStmnt::Val(flags, val),
    <call:Call> => RootStmnt::Call(call),
    <flags:Flag*> <import:Import> => RootStmnt::Import(flags, import),
    <if_:If> => RootStmnt::If(if_),
    <while_:While> => RootStmnt::While(while_),
    <match_:Match> => RootStmnt::Match(match_),
    <flags:Flag*> <ty:TypeDecl> => RootStmnt::TypeDecl(flags, ty),
    <flags:Flag*> <apply:Apply> => RootStmnt::Apply(flags, apply),
    <flags:Flag*> <block:Block> => RootStmnt::Block(flags, block),
};

pub RootStmnts: Vec<RootStmnt<'input>> = <mut items:(<RootStmnt> ";")*> <last:RootStmnt?> => match last {
    Some(last) => {
        items.push(last);
        items
    },
    None => items,
};

// THE CUSTOM LEXER

// Bindings to the custom lexer written in the `scanner` module.
extern {
    type Location = usize;
    type Error = ();

    enum Tok<'input> {
        "#" => Tok::Hash,
        "::" => Tok::ColCol,
        ":" => Tok::Col,
        "." => Tok::Dot,
        "?" => Tok::Quest,
        "<-" => Tok::LArrow,
        "->" => Tok::RArrow,
        "=>" => Tok::FatArrow,
        "-=" => Tok::MinEq,
        "-" => Tok::Min,
        "*=" => Tok::StarEq,
        "*" => Tok::Star,
        "!=" => Tok::BangEq,
        "!" => Tok::Bang,
        "&&" => Tok::AmpAmp,
        "&=" => Tok::AmpEq,
        "&" => Tok::Amp,
        "/=" => Tok::SlashEq,
        "/" => Tok::Slash,
        "%=" => Tok::PercEq,
        "%" => Tok::Perc,
        "+=" => Tok::PlusEq,
        "+" => Tok::Plus,
        "<<=" => Tok::LtLtEq,
        "<<" => Tok::LtLt,
        "<=" => Tok::LtEq,
        "<" => Tok::Lt,
        ">>=" => Tok::GtGtEq,
        ">>" => Tok::GtGt,
        ">=" => Tok::GtEq,
        ">" => Tok::Gt,
        "^=" => Tok::CaretEq,
        "^" => Tok::Caret,
        "|=" => Tok::PipeEq,
        "||" => Tok::PipePipe,
        "|" => Tok::Pipe,
        "==" => Tok::EqEq,
        "=" => Tok::Eq,
        "[" => Tok::LBrack,
        "]" => Tok::RBrack,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "{" => Tok::LCurly,
        "}" => Tok::RCurly,
        "@" => Tok::At,
        "," => Tok::Comma,
        ";" => Tok::Semi,

        "true" => Tok::KTrue,
        "false" => Tok::KFalse,
        "fluid" => Tok::KFluid,
        "as" => Tok::KAs,
        "routine" => Tok::KRoutine,
        "val" => Tok::KVal,
        "shared" => Tok::KShared,
        "import" => Tok::KImport,
        "from" => Tok::KFrom,
        "if" => Tok::KIf,
        "else" => Tok::KElse,
        "while" => Tok::KWhile,
        "match" => Tok::KMatch,
        "struct" => Tok::KStruct,
        "type" => Tok::KType,
        "enum" => Tok::KEnum,
        "break" => Tok::KBreak,
        "continue" => Tok::KContinue,
        "return" => Tok::KReturn,
        "apply" => Tok::KApply,
        "contract" => Tok::KContract,
        "to" => Tok::KTo,
        
        id => Tok::Id(<&'input str>),
        int => Tok::Int(<&'input str>),
        xint => Tok::XInt(<&'input str>),
        bint => Tok::BInt(<&'input str>),
        float => Tok::Float(<&'input str>),
        str => Tok::Str(<&'input str>),
    }
}